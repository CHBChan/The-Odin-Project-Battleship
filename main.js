/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (() => {

eval("const ship = (length) => {\n\n    let health = length;\n    let sunk = false;\n\n    const hit = () => {\n\n        health -= 1;\n\n        if(health <= 0) {\n\n            Sunk();\n        }\n    };\n\n    const Sunk = () => {\n\n        sunk = true;\n    };\n\n    const isSunk = () => {\n\n        return sunk;\n    }\n\n    return { hit, Sunk, isSunk };\n};\n\nconst gameBoard = () => {\n\n    let playerShips = [];\n    let aiShips = [];\n    \n    let playerShipCount = 0;\n    let aiShipCount = 0;\n\n    const placeShip = (player, shipType, coord, horizontal = 0, vertical = 0) => {\n\n        let coords = [];\n\n        if(player === 'player') {\n\n            switch(shipType) {\n\n                case 'carrier':\n                    let carrier = ship(5);\n                    coords = [];\n                    for(let i = 0; i < 5; i++) {\n\n                        let target_x = parseInt(coord.x) + horizontal * i;\n                        let target_y = parseInt(coord.y) + vertical * i;\n                        coords.push({ 'x': target_x, 'y': target_y });\n                    }\n                    playerShips.push({ 'ship': carrier, 'coords': coords });\n                    break;\n\n                case 'battleship':\n                    let battleship = ship(4);\n                    coords = [];\n                    for(let i = 0; i < 4; i++) {\n\n                        let target_x = parseInt(coord.x) + horizontal * i;\n                        let target_y = parseInt(coord.y) + vertical * i;\n                        coords.push({ 'x': target_x, 'y': target_y });\n                    }\n                    playerShips.push({ 'ship': battleship, 'coords': coords });\n                    break;\n\n                case 'destroyer':\n                    let destroyer = ship(3);\n                    coords = [];\n                    for(let i = 0; i < 3; i++) {\n\n                        let target_x = parseInt(coord.x) + horizontal * i;\n                        let target_y = parseInt(coord.y) + vertical * i;\n                        coords.push({ 'x': target_x, 'y': target_y });\n                    }\n                    playerShips.push({ 'ship': destroyer, 'coords': coords });\n                    break;\n\n                case 'submarine':\n                    let submarine = ship(3);\n                    coords = [];\n                    for(let i = 0; i < 3; i++) {\n\n                        let target_x = parseInt(coord.x) + horizontal * i;\n                        let target_y = parseInt(coord.y) + vertical * i;\n                        coords.push({ 'x': target_x, 'y': target_y });\n                    }\n                    playerShips.push({ 'ship': submarine, 'coords': coords });\n                    break;\n\n                case 'patrol':\n                    let patrol = ship(2);\n                    coords = [];\n                    for(let i = 0; i < 2; i++) {\n\n                        let target_x = parseInt(coord.x) + horizontal * i;\n                        let target_y = parseInt(coord.y) + vertical * i;\n                        coords.push({ 'x': target_x, 'y': target_y });\n                    }\n                    playerShips.push({ 'ship': patrol, 'coords': coords });\n                    break;\n\n            }\n            playerShipCount++;\n        }\n        else {\n            \n            switch(shipType) {\n\n                case 'carrier':\n                    let carrier = ship(5);\n                    coords = [];\n                    for(let i = 0; i < 5; i++) {\n\n                        let target_x = parseInt(coord.x) + horizontal * i;\n                        let target_y = parseInt(coord.y) + vertical * i;\n                        coords.push({ 'x': target_x, 'y': target_y });\n                    }\n                    aiShips.push({ 'ship': carrier, 'coords': coords });\n                    break;\n\n                case 'battleship':\n                    let battleship = ship(4);\n                    coords = [];\n                    for(let i = 0; i < 4; i++) {\n\n                        let target_x = parseInt(coord.x) + horizontal * i;\n                        let target_y = parseInt(coord.y) + vertical * i;\n                        coords.push({ 'x': target_x, 'y': target_y });\n                    }\n                    aiShips.push({ 'ship': battleship, 'coords': coords });\n                    break;\n\n                case 'destroyer':\n                    let destroyer = ship(3);\n                    coords = [];\n                    for(let i = 0; i < 3; i++) {\n\n                        let target_x = parseInt(coord.x) + horizontal * i;\n                        let target_y = parseInt(coord.y) + vertical * i;\n                        coords.push({ 'x': target_x, 'y': target_y });\n                    }\n                    aiShips.push({ 'ship': destroyer, 'coords': coords });\n                    break;\n\n                case 'submarine':\n                    let submarine = ship(3);\n                    coords = [];\n                    for(let i = 0; i < 3; i++) {\n\n                        let target_x = parseInt(coord.x) + horizontal * i;\n                        let target_y = parseInt(coord.y) + vertical * i;\n                        coords.push({ 'x': target_x, 'y': target_y });\n                    }\n                    aiShips.push({ 'ship': submarine, 'coords': coords });\n                    break;\n\n                case 'patrol':\n                    let patrol = ship(2);\n                    coords = [];\n                    for(let i = 0; i < 2; i++) {\n\n                        let target_x = parseInt(coord.x) + horizontal * i;\n                        let target_y = parseInt(coord.y) + vertical * i;\n                        coords.push({ 'x': target_x, 'y': target_y });\n                    }\n                    aiShips.push({ 'ship': patrol, 'coords': coords });\n                    break;\n\n            }\n            aiShipCount++;\n        }\n    };\n\n    const receiveAttack = (attacker, coord) => {\n\n        if(attacker === 'player') {\n\n            for(ship_info of aiShips) {\n\n                for(shipCoord of ship_info.coords) {\n\n                    if(coord.x === shipCoord.x && coord.y === shipCoord.y) {\n\n                        // Visual indicator\n                        document.querySelector(`.ai.row${coord.y}.col${coord.x}`).setAttribute('style', 'background-color: red');\n\n                        ship_info.ship.hit();\n                        if(ship_info.ship.isSunk()) {\n\n                            aiShipCount--;\n                        }\n                        return true;\n                    }\n                }\n            }\n            return false;\n        }\n        else {\n\n            for(ship_info of playerShips) {\n\n                for(shipCoord of ship_info.coords) {\n\n                    if(coord.x === shipCoord.x && coord.y === shipCoord.y) {\n\n                        // Visual indicator\n                        document.querySelector(`.player.row${coord.y}.col${coord.x}`).setAttribute('style', 'background-color: red');\n\n                        ship_info.ship.hit();\n                        if(ship_info.ship.isSunk()) {\n\n                            playerShipCount--;\n                        }\n                        return true;\n                    }\n                }\n            }\n            return false;\n        }\n    };\n\n    const checkOccupied = (board, hoverCoord, length, rotate) => {\n\n        if(board === 'player') {\n\n            for(ship_info of playerShips) {\n\n                for(coord of ship_info.coords) {\n\n                    for(let i = 0; i < length; i++) {\n\n                        let target_x = parseInt(hoverCoord.x) + i*(1 - rotate);\n                        let target_y = parseInt(hoverCoord.y) + i*rotate;\n                        if(target_x === coord.x && target_y === coord.y) {\n                            \n                            return true;\n                        }\n                    }\n                }\n            }\n        }\n        else {\n\n            for(ship_info of aiShips) {\n\n                for(coord of ship_info.coords) {\n\n                    for(let i = 0; i < length; i++) {\n\n                        let target_x = parseInt(hoverCoord.x) + i*(1 - rotate);\n                        let target_y = parseInt(hoverCoord.y) + i*rotate;\n                        if(target_x === coord.x && target_y === coord.y) {\n                            \n                            return true;\n                        }\n                    }\n                };\n            };\n        }\n        return false;\n    };\n\n    const getPlayerCount = () => {\n\n        return playerShipCount;\n    };\n\n    const getAICount = () => {\n\n        return aiShipCount;\n    };\n\n    return { placeShip, receiveAttack, checkOccupied, getPlayerCount, getAICount };\n};\n\nconst player = (name = 'AI') => {\n\n    let playerAttackedCoords = [];\n    let aiAttackedCoords = [];\n\n    const attack = (coord) => {\n        \n        if(name === 'AI') {\n\n            for(coords of aiAttackedCoords) {\n\n                if(coord.x === coords.x && coord.y === coords.y)\n                {\n                    return false;\n                }\n            }\n            // Add hit indicator\n            let symb = document.createElement('span');\n            symb.setAttribute('class', 'material-icons');\n            symb.innerHTML = 'close';\n            document.querySelector(`.player.row${coord.y}.col${coord.x}`).appendChild(symb);\n\n            gb.receiveAttack('AI', coord);\n            aiAttackedCoords.push(coord);\n            return true;\n        }\n        else if(name === 'player') {\n\n            for(coords of playerAttackedCoords) {\n\n                if(coord.x === coords.x && coord.y === coords.y)\n                {\n                    return false;\n                }\n            }\n            // Add hit indicator\n            let symb = document.createElement('span');\n            symb.setAttribute('class', 'material-icons');\n            symb.innerHTML = 'close';\n            document.querySelector(`.ai.row${coord.y}.col${coord.x}`).appendChild(symb);\n\n            gb.receiveAttack('player', coord);\n            playerAttackedCoords.push(coord);\n            return true;\n        }\n        else {\n\n            return false;\n        }\n    };\n\n    return { attack };\n};\n\nconst game = (() => {\n\n    let content = document.querySelector('.content');\n\n    // Generate grids in DOM\n    let playerBoard = document.createElement('div');\n    playerBoard.setAttribute('class', 'playerBoard');\n    playerBoard.classList.add('grid');\n    let enemyBoard = document.createElement('div');\n    enemyBoard.setAttribute('class', 'enemyBoard');\n    enemyBoard.classList.add('grid');\n\n    for(let i = 0; i < 7; i++) {\n\n        for(let j = 0; j < 7; j++) {\n\n            let cell = document.createElement('div');\n            cell.setAttribute('class', 'player');\n            cell.classList.add('cell');\n            cell.classList.add('row'+i);\n            cell.classList.add('col'+j);\n            let cell2 = document.createElement('div');\n            cell2.setAttribute('class', 'ai');\n            cell2.classList.add('cell');\n            cell2.classList.add('row'+i);\n            cell2.classList.add('col'+j);\n\n            playerBoard.appendChild(cell);\n            enemyBoard.appendChild(cell2);\n        }\n    }\n    let message = document.createElement('p');\n    message.setAttribute('class', 'message');\n    message.innerHTML = 'Place your carrier.';\n\n    let btn = document.createElement('button');\n    btn.setAttribute('class', 'rotateBtn');\n    btn.innerHTML = 'Rotate';\n    btn.addEventListener('click', () => { rotate(); });\n\n    content.appendChild(playerBoard);\n    content.appendChild(enemyBoard);\n    document.body.appendChild(message);\n    document.body.appendChild(btn);\n\n    // Placing ships\n    let shipsPlaced = 0;\n    let shipSizes = [5, 4, 3, 3, 2];\n    let shipNames = ['carrier', 'battleship', 'destroyer', 'submarine', 'patrol'];\n\n    playerBoard.addEventListener('mouseover', function hover(event) {\n        \n        clearCells();\n\n        if(event.target.classList.contains('cell')) {\n\n            // Get cell coordinates\n            let x = event.target.classList[3].substring(3);\n            let y = event.target.classList[2].substring(3);\n            \n            if((7 - x) >= shipSizes[shipsPlaced]*(1-vertical) && (7 - y) >= shipSizes[shipsPlaced]*vertical && !gb.checkOccupied('player', { 'x': x, 'y': y }, shipSizes[shipsPlaced], vertical)) {\n\n                for(let i = 0; i < shipSizes[shipsPlaced]; i++) {\n\n                    let target_x = parseInt(x) + (i*(1-vertical));\n                    let target_y = parseInt(y) + (i*vertical);\n\n                    document.querySelector(`.player.cell.row${target_y}.col${target_x}`).setAttribute('style', 'background-color: green');\n                }\n            }\n            else {\n                event.target.setAttribute('style', 'background-color: red');\n            }\n\n            // Remove event listener after all ships are placed\n            if(shipsPlaced >= 5) {\n\n                clearCells();\n                playerBoard.removeEventListener('mouseover', hover);\n            }\n        }\n    });\n    playerBoard.addEventListener('mouseleave', function leave() {\n\n        clearCells();\n\n        // Remove event listener after all ships are placed\n        if(shipsPlaced >= 5) {\n\n            playerBoard.removeEventListener('mouseleave', leave);\n        }\n    });\n    playerBoard.addEventListener('click', function click(event) {\n\n        if(event.target.classList.contains('cell')) {\n\n            // Get cell coordinates\n            let x = event.target.classList[3].substring(3);\n            let y = event.target.classList[2].substring(3);\n            let coord = { 'x': x, 'y': y };\n\n            if((7 - x) >= shipSizes[shipsPlaced]*(1-vertical) && (7 - y) >= shipSizes[shipsPlaced]*vertical && !gb.checkOccupied('player', coord, shipSizes[shipsPlaced], vertical)) {\n\n                // Show ship placed visually\n                for(let i = 0; i < shipSizes[shipsPlaced]; i++) {\n\n                    let target_x = parseInt(x) + (i*(1-vertical));\n                    let target_y = parseInt(y) + (i*vertical);\n                    let cell = document.querySelector(`.player.cell.row${target_y}.col${target_x}`);\n                    cell.setAttribute('style', 'background-color: gray');\n                    cell.classList.replace('cell', 'ship');\n                }\n\n                gb.placeShip('player', shipNames[shipsPlaced], coord, (1 - vertical), vertical);\n                shipsPlaced++;\n                clearCells();\n\n                // Update message\n                message.innerHTML = `Place your ${shipNames[shipsPlaced]}.`\n\n                // Remove event listener after all ships are placed\n                if(shipsPlaced >= 5) {\n                    \n                    playerBoard.removeEventListener('click', click);\n\n                    // Change cursor type on board\n                    playerBoard.setAttribute('style', 'cursor: not-allowed');\n\n                    // Start game cycle\n                    gameCycle();\n                }\n            }\n        }\n    });\n})();\n\nfunction clearCells() {\n\n    // Unhighlight all cells\n    let cells = document.querySelectorAll('.cell');\n    cells.forEach(cell => {\n\n        cell.setAttribute('style', 'background-color: white');\n    });\n}\n\nfunction placeAIships() {\n\n    // Placing ships\n    let shipsPlaced = 0;\n    let shipSizes = [5, 4, 3, 3, 2];\n    let shipNames = ['carrier', 'battleship', 'destroyer', 'submarine', 'patrol'];\n    \n    while(shipsPlaced < 5) {\n\n        let vert = Math.round(Math.random());\n\n        let x = Math.floor(Math.random() * (6 - shipSizes[shipsPlaced] * (1 - vert)));\n        let y = Math.floor(Math.random() * (6 - shipSizes[shipsPlaced] * vert));\n        let coord = { 'x': x, 'y': y };\n\n        if(!gb.checkOccupied('AI', coord, shipSizes[shipsPlaced], vert)) {\n\n            /* Debug \n            console.log((vert === 0)? 'horizontal':'vertical');\n            console.log(`x limit ${(6 - shipSizes[shipsPlaced] * (1 - vert))}`);\n            console.log(`y limit ${(6 - shipSizes[shipsPlaced] * (vert))}`);\n            console.log(`${shipNames[shipsPlaced]} placed at x: ${coord.x} y: ${coord.y}`);\n\n            for(let i = 0; i < shipSizes[shipsPlaced]; i++) {\n\n                let cell = document.querySelector(`.ai.cell.row${y + i * vert}.col${x + i * (1 - vert)}`);\n                cell.setAttribute('style', 'background-color: purple');\n                cell.classList.replace('cell', 'ship');\n            }*/\n            // Place ship\n            gb.placeShip('AI', shipNames[shipsPlaced], coord, (1 - vert), vert);\n            shipsPlaced++;\n        }\n    }\n}\n\nfunction gameCycle() {\n\n    // Create players\n    p1 = player('player');\n    p2 = player();\n\n    const turn = {\n\n        Player: 'Player',\n        AI: 'AI'\n    };\n\n    let message = document.querySelector('.message');\n    let current_turn;\n\n    // Give the illusion of delay\n    setTimeout(() => {\n\n        // Update message\n        message.innerHTML = 'Your turn.';\n\n        // Set turn\n        current_turn = turn.Player;\n    }, 2000);\n\n    // Update message\n    message.innerHTML = 'AI is currently placing their ships...';\n\n    // Place AI ships\n    placeAIships();\n\n    // Remove rotate button\n    document.querySelector('.rotateBtn').remove();\n\n    // Add event listener\n    let aiBoard = document.querySelector('.enemyBoard');\n\n    aiBoard.addEventListener('click', (event) => {\n\n        if(current_turn === turn.Player && event.target.classList.contains('cell'))\n        {\n\n            let target_y = parseInt(event.target.classList[2].substring(3));\n            let target_x = parseInt(event.target.classList[3].substring(3));\n            let coord = { 'x': target_x, 'y': target_y };\n\n            // If player selection is valid\n            if(p1.attack(coord)) {\n\n                // Change turn\n                current_turn = turn.AI;\n\n                // Update cursor\n                aiBoard.setAttribute('style', 'cursor: not-allowed');\n\n                if(gb.getAICount() <= 0) {\n\n                    // Update message\n                    message.innerHTML = 'You destroyed all their ships, you win!';\n                    return;\n                }\n\n                // Update message\n                message.innerHTML = 'AI\\'s turn...';\n\n                setTimeout(() => {\n\n                    // AI attack\n                    let x = Math.floor(Math.random() * 7);\n                    let y = Math.floor(Math.random() * 7);\n                    let coord = { 'x': x, 'y': y };\n\n                    while(!p2.attack(coord)) {\n\n                        x = Math.floor(Math.random() * 7);\n                        y = Math.floor(Math.random() * 7);\n                        coord = { 'x': x, 'y': y };\n                    }\n\n                    if(gb.getPlayerCount() <= 0) {\n\n                        // Update message\n                        message.innerHTML = 'The AI destroyed all your ship, you lose!';\n                        return;\n                    }\n                    else {\n\n                        // Change turn\n                        current_turn = turn.Player;\n\n                        // Update message\n                        message.innerHTML = 'Your turn.';\n\n                        // Update cursor\n                        aiBoard.setAttribute('style', 'cursor: pointer');\n                    }\n                }, 2000);\n            }\n        }\n    });\n    // Update cursor\n    aiBoard.setAttribute('style', 'cursor: pointer');\n}\n\nlet vertical = 0;\n\nfunction rotate() {\n\n    if(vertical === 0)\n        vertical = 1;\n    else\n        vertical = 0;\n};\n\n// Create gameBoard\nlet gb = gameBoard();\n\n//# sourceURL=webpack://the-odin-project-battleship/./src/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/index.js"]();
/******/ 	
/******/ })()
;